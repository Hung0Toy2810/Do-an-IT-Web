// <auto-generated />
using System;
using Backend.SQLDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(SQLServerDbContext))]
    [Migration("20251006053353_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Model.Entity.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Administrator_Username");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("Backend.Model.Entity.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Option")
                        .HasDatabaseName("IX_Cart_Option");

                    b.HasIndex("ProductId");

                    b.HasIndex("CustomerId", "ProductId", "Option")
                        .IsUnique()
                        .HasDatabaseName("IX_Cart_CustomerId_ProductId_Option");

                    b.ToTable("Carts", t =>
                        {
                            t.HasCheckConstraint("CK_Cart_Quantity_Positive", "[Quantity] > 0");
                        });
                });

            modelBuilder.Entity("Backend.Model.Entity.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Category_Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Backend.Model.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AvtKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerName")
                        .HasDatabaseName("IX_Customer_CustomerName");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Customer_PhoneNumber");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Customer_Status");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Backend.Model.Entity.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Invoice_CreatedAt");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Invoice_CustomerId");

                    b.HasIndex("DeliveryAddress")
                        .HasDatabaseName("IX_Invoice_DeliveryAddress");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Backend.Model.Entity.InvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Option")
                        .HasDatabaseName("IX_InvoiceDetail_Option");

                    b.HasIndex("ProductId");

                    b.HasIndex("InvoiceId", "ProductId")
                        .HasDatabaseName("IX_InvoiceDetail_InvoiceId_ProductId");

                    b.ToTable("InvoiceDetails", t =>
                        {
                            t.HasCheckConstraint("CK_InvoiceDetail_Quantity_Positive", "[Quantity] > 0");
                        });
                });

            modelBuilder.Entity("Backend.Model.Entity.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("SubCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("IX_Product_SubCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Backend.Model.Entity.ProductDailyStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("PurchasesCount")
                        .HasColumnType("bigint");

                    b.Property<long>("ViewsCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_ProductDailyStat_Date");

                    b.HasIndex("ProductId", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductDailyStat_ProductId_Date");

                    b.ToTable("ProductDailyStats", t =>
                        {
                            t.HasCheckConstraint("CK_ProductDailyStat_PurchasesCount_NonNegative", "[PurchasesCount] >= 0");

                            t.HasCheckConstraint("CK_ProductDailyStat_ViewsCount_NonNegative", "[ViewsCount] >= 0");
                        });
                });

            modelBuilder.Entity("Backend.Model.Entity.RecentlyView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("CustomerId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("IX_RecentlyView_CustomerId_ProductId");

                    b.HasIndex("CustomerId", "ViewedAt")
                        .HasDatabaseName("IX_RecentlyView_CustomerId_ViewedAt");

                    b.ToTable("RecentlyViews");
                });

            modelBuilder.Entity("Backend.Model.Entity.SubCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_SubCategory_Name");

                    b.HasIndex("CategoryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_SubCategory_CategoryId_Name");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("Backend.Model.Entity.Cart", b =>
                {
                    b.HasOne("Backend.Model.Entity.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Entity.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Model.Entity.Invoice", b =>
                {
                    b.HasOne("Backend.Model.Entity.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Backend.Model.Entity.InvoiceDetail", b =>
                {
                    b.HasOne("Backend.Model.Entity.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Entity.Product", "Product")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Model.Entity.Product", b =>
                {
                    b.HasOne("Backend.Model.Entity.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Backend.Model.Entity.ProductDailyStat", b =>
                {
                    b.HasOne("Backend.Model.Entity.Product", "Product")
                        .WithMany("ProductDailyStats")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Model.Entity.RecentlyView", b =>
                {
                    b.HasOne("Backend.Model.Entity.Customer", "Customer")
                        .WithMany("RecentlyViews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Entity.Product", "Product")
                        .WithMany("RecentlyViews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Model.Entity.SubCategory", b =>
                {
                    b.HasOne("Backend.Model.Entity.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Backend.Model.Entity.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Backend.Model.Entity.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Invoices");

                    b.Navigation("RecentlyViews");
                });

            modelBuilder.Entity("Backend.Model.Entity.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Backend.Model.Entity.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("ProductDailyStats");

                    b.Navigation("RecentlyViews");
                });

            modelBuilder.Entity("Backend.Model.Entity.SubCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
